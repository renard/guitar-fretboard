%%

%% Copyright © 2018 by Sébastien Gross <seb -at- chezwam -dot- org>

%% This program is free software. It comes without any warranty, to the extent
%% permitted by applicable law. You can redistribute it and/or modify it under
%% the terms of the Do What The Fuck You Want To Public License, Version 2, as
%% published by Sam Hocevar. See http://sam.zoy.org/wtfpl/COPYING for more
%% details.

%% This file may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License, either version 1.3c of this license
%% or (at your option) any later version. The latest version of this
%% license is in:

%% http://www.latex-project.org/lppl.txt

%% and version 1.3c or later is part of all distributions of LaTeX
%% version 2006/05/20 or later.


\def\fbfileversion{1.0}
\def\fbfiledate{2018/10/28}


\ProvidesPackage{guitar-fretboard}[\fbfiledate\space (v\fbfileversion)]
\NeedsTeXFormat{LaTeX2e}


%% Include all required packages
\RequirePackage{tikz}
\usetikzlibrary{shapes,positioning,calc,shapes.multipart,backgrounds}
\RequirePackage{ifthen}
\RequirePackage{xspace}
\RequirePackage{fontspec}
\RequirePackage{pdftexcmds}
\RequirePackage{etoolbox}
%\RequirePackage{adjustbox}
\RequirePackage{guitar-fretboard.notes}
%% \usepackage[minimal]{leadsheets}
%% \useleadsheetslibraries{chords,musicsymbols}
%% \usepackage[full]{leadsheets}
%% \useleadsheetslibraries{musicsymbols}
\RequirePackage{xparse,expl3}

\makeatletter

\pgfkeys{/tikz/.cd,
  % Execute style
  @es/.style = {#1},
  % Execute macro
  @em/.style = {@es/.expand once=#1}
}


%\newfontfamily\notefont{Noto Sans Display Medium}

% Some default values
\tikzset{
  fretboard/.style = {yscale=-1.3,xscale=2.6,
    background rectangle/.style={fill=white}, show background rectangle},
  legend/.style = { anchor=center, align=center,font=\Huge },
  legend position chord/.style = {shift = {(-1.5, 0)} },
  legend position/.style = {shift = {(0,1.5)} },
  fret/.style = {  line width = 2pt, },
  string/.style = {  },
  fret numbers/.style = {font=\Large },
  overlay/.style = { color=white, opacity=0.85},
  note/.style = {
    circle,
    inner sep = 0.2em,
    draw,
    align=center,
    minimum size=3.4em,
    fill = white,
    font=\huge,
  },
  split note/.style = {
    circle split,
    font=\large,
  },
  note highlight/.style = {draw=red, line width=3pt},
  note shade/.style = {fill = white, opacity=0.85, text = black!30,
    draw=black!20,
  },
  string tuning/.style = {
    rotate=90,
    anchor=center,
    align=center,
    font=\LARGE,
  },
  %% transformations should be done in a separate scope
  string tuning position/.style = {
    shift = {(-0.65, 1)},
  },
  chord/.style = {
    rotate=90,
  },
}


%% Define the keys
\newif\iffb@fret@numbers@visible
\newif\iffb@transpose@pitch
\newif\iffb@show@tuning
\newif\iffb@chord

\pgfkeys{
  /fb/.cd,
  fretboard/.store in = \fb@fretboard@style,
  fretboard,
  scale/.initial = 0.3,
  frets min/.initial = 0,
  frets max/.initial = 12,
  frets before/.initial = 0,
  frets after/.initial = 0,
  frets offset/.initial = 0.5,
  %
  tuning/.initial = {4, 9, 2, 7, 11, 4},
  tuning style/.store in = \fb@tuning@style,
  tuning style,
  show tuning/.is if = fb@show@tuning,
  show tuning = true,
  %
  transpose/.initial = 0,
  transpose pitch/.is if = fb@transpose@pitch,
  transpose pitch = false,
  %
  chord/.is if = fb@chord,
  chord = false,
  chord style/.store in = \fb@chord@style,
  chord style,
  %
  string/.store in = \fb@string@style,
  string,
  %
  string width/.initial = 0.5pt,
  string factor/.initial = 0.75pt,
  %
  fret/.store in = \fb@fret@style,
  fret,
  %
  fret numbers/.store in = \fb@fret@numbers@style,
  fret numbers,
  fret numbers position/.initial = 0.75,
  %
  fret numbers visible/.is if = fb@fret@numbers@visible,
  fret numbers visible = false,
  %
  note/.store in = \fb@note@style,
  note,
  %
  split note/.store in = \fb@split@note@style,
  split note,
  %
  highlight note/.store in = \fb@note@highlight@style,
  highlight note,
  %
  overlay/.store in = \fb@overlay@style,
  overlay,
  %
  legend text/.initial = {},
  legend/.store in = \fb@legend@style,
  legend,
}

%% Computes the length of given array.
%
% #1 - macro to store #2 length
% #2 - The array
%
% Taken from https://tex.stackexchange.com/questions/66121
\def\getlen#1#2{%
  \pgfmathsetmacro{\lenarray}{0}% 
  \foreach \i in #2{%
    \pgfmathtruncatemacro{\lenarray}{\lenarray+1}%
    \global\let\lenarray\lenarray%
  }%
  \let#1=\lenarray%
}%


%% Evaluates an expression and stores it in a macro
%
% #1 destination macro
% #2 a math expression
\def\pgfmatheval#1#2{%
  \pgfmathparse{#2}%
  \let#1=\pgfmathresult%
}%

\def\@pitches{"C","CS","D","Eb","E","F","FS","G","GS","A","Bb","B"}
\newcommand{\transposepitch}[2]{%
  \pgfmatheval{\newpitch}{array({\@pitches},
    Mod(\pgfkeysvalueof{/notes/#1/semitones}+#2,12))}
}%


\newenvironment{fb}[1][]{%

  \pgfkeys{/fb/.cd, #1}%

  %% compute some values
  \pgfmathtruncatemacro{\fb@canvas@x@min}{
    \pgfkeysvalueof{/fb/frets min} - \pgfkeysvalueof{/fb/frets before}}
  \pgfmathtruncatemacro{\fb@canvas@x@max}{
    \pgfkeysvalueof{/fb/frets max} + \pgfkeysvalueof{/fb/frets after}}
  \pgfmathtruncatemacro{\fb@canvas@x@max@plusone}{\fb@canvas@x@max+1}


  \def\@@rotate{0}
  \tikzset{ @@chord/.style = {}, }
  \iffb@chord
  \def\@@rotate{-90}%
  \tikzset{@@chord/.append style = {
      chord, @em=\fb@chord@style,
    }
  }
  \fi

  
  % String list
  \edef\fb@strings{\pgfkeysvalueof{/fb/tuning}}
  \getlen{\fb@strings@count}{\fb@strings}
  \begin{adjustbox}{rotate=\@@rotate,scale={\pgfkeysvalueof{/fb/scale}}}
  \begin{tikzpicture} [fretboard, @em=\fb@fretboard@style]

    
    % Draw the frets and put fret number
    \foreach \fret [count=\@ifret from \fb@canvas@x@min]
    in {\fb@canvas@x@min,...,\fb@canvas@x@max@plusone}{%
      \pgfmatheval{\@fret}{\fret-\pgfkeysvalueof{/fb/frets offset}}
      \draw [fret, @em=\fb@fret@style] (\@fret,1) -- (\@fret,\fb@strings@count);
      % Do not draw last fret number
      \iffb@fret@numbers@visible{%
        \ifnum\fret < \fb@canvas@x@max@plusone{%
          \node[fret numbers, @em=\fb@fret@numbers@style,@@chord] at
          (\@ifret,\fb@strings@count+\pgfkeysvalueof{/fb/fret numbers position})
               {\@ifret};
        }\fi
      }\fi
    }

    % Draw the strings
    \foreach \is in {1,...,\fb@strings@count} {
      \draw[string, @em=\fb@string@style,
        line width=\pgfkeysvalueof{/fb/string width} +
        \is*\pgfkeysvalueof{/fb/string factor}]
      (\fb@canvas@x@min-\pgfkeysvalueof{/fb/frets offset}, \is) --
      (\fb@canvas@x@max@plusone-\pgfkeysvalueof{/fb/frets offset}, \is);
    }
    
}{

  % Draw the opacity mask
  \fill [overlay,@em=\fb@overlay@style]
  (\fb@canvas@x@min-\pgfkeysvalueof{/fb/frets offset}-0.07,0)
  rectangle
  (\pgfkeysvalueof{/fb/frets min}-\pgfkeysvalueof{/fb/frets offset}-0.07, \fb@strings@count+1);

  \fill [overlay,@em=\fb@overlay@style]
  (\fb@canvas@x@max+\pgfkeysvalueof{/fb/frets offset}+0.07,0)
  rectangle
  (\pgfkeysvalueof{/fb/frets max}+\pgfkeysvalueof{/fb/frets offset}+0.07, \fb@strings@count+1);

  %% Add a legend
  \expandafter\notblank\expandafter{\pgfkeysvalueof{/fb/legend text}}{%
    \iffb@chord
    \node[legend position chord] (l) at (\fb@canvas@x@min-\pgfkeysvalueof{/fb/frets offset}, 1) {};
    \node[legend position chord] (r) at (\fb@canvas@x@min-\pgfkeysvalueof{/fb/frets offset}, \fb@strings@count) {};
    \else
    \node[legend position] (l) at (\fb@canvas@x@min, 1) {};
    \node[legend position] (r) at (\fb@canvas@x@max, 1) {};
    \fi
    \node[legend,@em=\fb@legend@style,@@chord] at ($(l)!0.5!(r)$) {\pgfkeysvalueof{/fb/legend text}};
  }%

  \iffb@show@tuning
  \begin{scope}[string tuning position]
  \foreach \s [count = \is ] in \fb@strings {
    \node[string tuning, @em=\fb@tuning@style]
    at (\fb@canvas@x@min, \fb@strings@count-\is ) {%
      \pgfmathparse{array({\@pitches}, Mod(\s,12))}%
      \pgfkeysvalueof{/notes/\pgfmathresult/text}%
    };
  }
  \end{scope}
  \fi

  \end{tikzpicture}
  \end{adjustbox}
}



\newif\iffb@note@haslower



\newcommand{\getnotename}[2]{%
  \iffb@transpose@pitch%
  \pgfkeysvalueof{/notes/\newpitch/#2}%
  \else%
  \pgfkeysvalueof{/notes/#1/#2}%
  \fi%
}%


\newcommand{\@setup@note@style}[2][]{
 \pgfkeys{/notes/#2/.cd, #1}%
  %% Define a dynamic local style to handle several cases (including highlight)
  \tikzset{@@note/.style={note,/notes/#2/style,@em=\fb@note@style, @@chord}}
  %% Check for hightight
  \iftrue\csname iffb@note@#2@highlight\endcsname%
  \tikzset{@@note/.append style = {
      note highlight,
      @em=\fb@note@highlight@style,
      /notes/#2/highlight style}}
  \fi%

  %% Check for lower node
  \iftrue\csname iffb@note@#2@lower\endcsname%
  \iffb@note@haslower
  \tikzset{@@note/.append style = {
      split note,
      @em=\fb@split@note@style,
      /notes/#2/split style}}
  \fi
  \fi%
}

%% Generic low level command to place a note.
%
%  #1 note style override
%  #2 The note to place (as defined with newnote)
%  #3 X
%  #4 Y
%
% You might want use \placenote instead
\newcommand{\@placenote}[4][]{
  %% place the note. Since the split is determined by style, we always place
  %% the lower part.
  \node[@@note] at (#3, #4) {%
    \getnotename{#2}{text}%
    \nodepart[]{lower}\getnotename{#2}{lower text}%
  };
  
  %% If the node should be shaded
  %% https://tex.stackexchange.com/questions/46377
  \iftrue\csname iffb@note@#2@shade\endcsname{%
    \node[@@note, note shade ] at (#3, #4) {
    \getnotename{#2}{text}%
    \nodepart[]{lower}\getnotename{#2}{lower text}%
    };
  }\fi
}

%% Generic high level command to place a note.
%
%  #1 note style override
%  #2 The note to place (as defined with newnote)
%  #3 X
%  #4 Y
%
\newcommand{\placenote}[4][]{
  \tikzset{ @@chord/.style = {}, }
  \@setup@note@style[#1]{#2}
  \@placenote[#1]{#2}{#3}{#4}
}  

\def\newpitch{C}



%% place note #2 on all defined strings.
%%
%% Style #1 is used to override default note style
\newcommand{\note}[2][]{
  \pgfkeys{/notes/#2/.cd, #1}%

  %% \notblank requires a macro and not a command result
  \pgfkeysgetvalue{/notes/#2/lower text}{\@@lower@text}

  %% Do we need to transpose the note?
  \let\newpitch=#2
  \iffb@transpose@pitch  
  \transposepitch{#2}{\pgfkeysvalueof{/fb/transpose}}
  \pgfkeysgetvalue{/notes/\newpitch/lower text}{\@@lower@text}
  \fi
  
  % Check if the lower part is defined for future usage
  \fb@note@haslowerfalse%
  \expandafter\notblank\expandafter{\@@lower@text}{%
    \fb@note@haslowertrue%
  }

  % limit note display
  \edef\note@limit{\pgfkeysvalueof{/notes/#2/limit}}
  \getlen{\note@limit@count}{\note@limit}
  %% Check if a string limit is defined, build a list of all string otherwise.
  \ifnum\note@limit@count >0%
    \edef\@strings@limit{\pgfkeysvalueof{/notes/#2/limit}}
    \else
    \edef\@strings@limit{1,...,\fb@strings@count}
  \fi

  %% Setup note style before looping over strings and octaves
  \@setup@note@style[#1]{#2}


  %% Compute note placement:
  %% X = semitone + transpose - string + octave
  %
  % First compute static parts:
  \pgfmathtruncatemacro{\@base@semitones}{
    %% Add note semitones from C
    \pgfkeysvalueof{/notes/#2/semitones}
    %% Finaly apply a transposition if needed.
    +\pgfkeysvalueof{/fb/transpose}
  }
    
  
  %% \str is the string index
  \foreach \str in \@strings@limit {
    %% Compute note placement:
    %
    % Compute the string part.
    \pgfmathtruncatemacro{\@base@semitones@string}{
      \@base@semitones
      %% Substract the string tuning (Convert string tuning to C).
      -array({\fb@strings},\fb@strings@count-\str)
    }
    \foreach \oct in { -24, -12, 0, 12, 24 } {
      %% Compute note position
      %
      % Add the octave part
      \pgfmathtruncatemacro{\@x}{
        \@base@semitones@string
        %% Add (of remove) octave to cover the whole fretboard 
        +\oct
      }
      \pgfmathparse{(\@x>=\fb@canvas@x@min) && (\@x<=\fb@canvas@x@max)?int(1):int(0)}
      %% If the note if within our fret range
      \ifnum\pgfmathresult>0{%
        \@placenote[#1]{#2}{\@x}{\str}
      }\fi
    }
  }
}




